#include("../src/use-chipper.stanza")
#include("../src/use-tester.stanza")

#use-syntax(core, chipper)

defpackage gcd :
   import core
   import verse
   import chipper
   import tester

defmodule GCD :
   input a: UInt<16>
   input b: UInt<16>
   input e: UInt<1>
   output z: UInt<16>
   output v: UInt<1>

   reg x: UInt<16>
   reg y: UInt<16>
   when x > y :
      x := x - y
   else :
      y := y - x
   when e :
      x := a
      y := b
   z := x
   v := y === UInt(0)

defn gcd-tests () :
  defn gcd (a:Int, b:Int) -> Int :
    if b == 0: a else: gcd(b, a % b)
  with-tester [t, c] = GCD() :
    val n = 256
    for i in 0 to 8 all? :
      val [a, b] = [rand(2, n), rand(2, n)]
      val z = gcd(a, b)
      rep loop (j = 0) :
        poke(t, c.a, a)
        poke(t, c.b, b)
        poke(t, c.e, int(j == 0))
        step(t)
        if j > n :
          false
        else if j <= 1 or peek(t, c.v) == 0 :
          loop(j + 1)
        else :
          expect(t, c.z, z)

defn main (args) :
   if length(args) > 1 and args[1] == "--testing" :
     gcd-tests()
   else :
     circuit c : GCD
     println(c)
   
main(commandline-arguments())
