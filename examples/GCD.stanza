#include("src/use-chipper.stanza")
#include("src/use-tester.stanza")

#use-syntax(core, chipper)

defpackage gcd :
   import core
   import verse
   import chipper
   import tester

defmodule GCD :
   input a: UInt<16>
   input b: UInt<16>
   input e: UInt<1>
   output z: UInt<16>
   output v: UInt<1>

   reg x: UInt<16>
   reg y: UInt<16>
   when x > y :
      x := x - y
   else :
      y := y - x
   when e :
      x := a
      y := b
   z := x
   v := y === UInt(0)

defn gcd-tests () :
  with-tester [t, c] = GCD() :
    val [a, b, z] = [64, 48, 16]
    rep loop () :
      val first = if cycles(t) == 0: 1 else: 0
      poke(t, c.a, a)
      poke(t, c.b, b)
      poke(t, c.e, first)
      step(t)
      if cycles(t) > 100 :
        false
      else if cycles(t) <= 1 or peek(t, c.v) == 0 :
        loop()
      else :
        expect(t, c.z, z)

defn main (args) :
   if length(args) > 1 and args[1] == "--testing" :
     gcd-tests()
   else :
     circuit c : GCD
     println(c)
   
main(commandline-arguments())
