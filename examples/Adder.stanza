#include("../src/use-chipper.stanza")
#include("../src/use-tester.stanza")

#use-syntax(core, chipper)

defpackage adder :
   import core
   import verse
   import chipper
   import tester

defmodule FullAdder :
   input a: UInt<1>
   input b: UInt<1>
   input cin: UInt<1>
   output sum: UInt<1>
   output cout: UInt<1>

   sum := a ^ b ^ cin
   cout := (a & b) | (b & cin) | (a & cin)

defmodule Adder (n:Int) :
   input a: UInt<n>
   input b: UInt<n>
   input cin: UInt<1>
   output sum: UInt<n>
   output cout: UInt<1>

   wire carry: UInt<1>[n + 1]
   wire sums: UInt<1>[n]
   carry[0] := cin
   for i in 0 to n do :
      inst fa : FullAdder
      fa.a := a[i]
      fa.b := b[i]
      fa.cin := carry[i]
      carry[i + 1] := fa.cout
      sums[i] := fa.sum

   sum := reduce(cat, sums)
   cout := carry[n]
   
defn adder-tests (n:Int) :
  with-tester [t, c] = Adder(n) :
    for k in 0 to 16 all? :
      val mx   = 1 << n
      val mask = mx - 1
      val a    = rand(mx)
      val b    = rand(mx)

      poke(t, c.a, a)
      poke(t, c.b, b)
      val sum = a + b
      step(t)
      expect(t, c.sum,  sum & mask)
      expect(t, c.cout, sum >> n)

defn main (args) :
   val n = 8
   if length(args) > 1 and args[1] == "--testing" :
     adder-tests(n)
   else :
     circuit c : Adder(n)
     println(c)
   
main(commandline-arguments())
