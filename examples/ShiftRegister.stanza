#include("../src/use-chipper.stanza")
#include("../src/use-tester.stanza")

#use-syntax(core, chipper)

defpackage shift-register :
   import core
   import verse
   import chipper
   import tester

defmodule ShiftRegister :
  input  in:  UInt<8>
  output out: UInt<8>

  reg r0 : UInt<8>
  reg r1 : UInt<8>
  reg r2 : UInt<8>
  reg r3 : UInt<8>
  r0 := in
  r1 := r0
  r2 := r1
  r3 := r2
  out := r3

defn shift-register-tests () :
  with-tester [t, c] = ShiftRegister() :
    val r = Array<Int>(4, 0)
    ;; shift in zeroes to initialize
    for k in 0 to 4 do :
      poke(t, c.in, 0)
      step(t)
    for n in 0 to 16 all? :
      val in = rand(256)
      poke(t, c.in, in)
      step(t)
      for i in 3 to 0 by -1 do :
        r[i] = r[i - 1]
      r[0] = in
      expect(t, c.out, r[3])

defn main (args) :
   if length(args) > 1 and args[1] == "--testing" :
     if shift-register-tests(): 0 else: -1
   else :
     circuit c : ShiftRegister
     println(c)
   
main(commandline-arguments())
