#include("../src/use-chipper.stanza")
#include("../src/use-tester.stanza")

#use-syntax(core, chipper)

defpackage shift-register :
   import core
   import verse
   import chipper
   import tester

defmodule ShiftRegisterCond :
  input in: UInt<1>
  input shift: UInt<1>
  output out: UInt<1>

  reg r0 : UInt<1>
  reg r1 : UInt<1>
  reg r2 : UInt<1>
  reg r3 : UInt<1>
  when shift :
    r0 := in
    r1 := r0
    r2 := r1
    r3 := r2
  out := r3

defn shift-register-tests () :
  with-tester [t, c] = ShiftRegisterCond() :
    val r   = Array<Int>(4, 0)
    ;; shift in zeroes to initialize
    for k in 0 to 4 do :
      poke(t, c.in,    0)
      poke(t, c.shift, 1)
      step(t)
    for n in 0 to 16 all? :
      val shift = rand(2)
      val in    = rand(2)
      poke(t, c.in,    in)
      poke(t, c.shift, shift)
      step(t)
      if shift == 1 :
        for i in 3 to 0 by -1 do :
          r[i] = r[i - 1]
        r[0] = in
      expect(t, c.out, r[3])

defn main (args) :
   if length(args) > 1 and args[1] == "--testing" :
     if shift-register-tests(): 0 else: -1
   else :
     circuit c : ShiftRegisterCond()
     println(c)
   
main(commandline-arguments())
